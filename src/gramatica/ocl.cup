package compil.inv.parser;

import compil.inv.semantica.*;
import compil.inv.geracao.GeradorDeCodigo;

parser code {:

    GeradorDeCodigo ger = GeradorDeCodigo.getInstance();

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal CONTEXT, INV,
        OR, XOR, AND, NOT, LT, GT, LE, GE, EQUAL, NEQUAL,
        PLUS, MINUS, MULT, DIVIDE, 
        SEMICOL, COLON, DCOLON, LPAREN, RPAREN, COMMA, RARROW, DOT, BAR,
	IF, THEN, ELSE, ENDIF, IMPLIES, SIZE, INCLUDES, EXCLUDES, FORALL, SELECT, EXISTS,
        INCLUDESALL;

terminal String ID, STRING, NUMERO, TRUE, FALSE;

non terminal No ExpressoesOcl, EspecificadorTipoOpt;
non terminal Restricao Restricao;
non terminal Classe DeclaracaoContexto, ClassifierContexto;
non terminal Expressao ExpOcl, ExpPrimaria;
non terminal Invariante InvContext;
non terminal Literal Literal;
non terminal Expressao ExpLogica, ExpRelacional, ExpAditiva, ExpMultiplicativa, ExpUnaria, ExpPosFixada;
non terminal Expressao ExpAditivaAux, ExpMultiAux, ExpPosFixadaAux, ExpLogicaAux, ExpRelacionalAux; 
non terminal ExpressaoIf ExpressaoIf; 
non terminal Operador OperadorUnario, OperadorMais, OperadorMulti, OperadorRelacional, OperadorLogico;
non terminal Propriedade ChamadaPropriedade;
non terminal Caminho Caminho, CaminhoAux;
non terminal Parametros ParametrosChamadaPropriedade, ParametrosChamadaPropriedadeAux, ParametrosChamadaPropriedadeOpt;
non terminal Declarador Declarador, DeclaradorAux;
non terminal OprdCol OperadorColecao;
non terminal OperacaoCol ChamadaPropriedadeColecao;

ExpressoesOcl ::= Restricao:r {: parser.ger.gerarArquivoRuby(r); :} ExpressoesOcl 
                |  ;

Restricao ::= DeclaracaoContexto:c InvContext:i {: RESULT = new Restricao(c); :};

DeclaracaoContexto ::= CONTEXT ClassifierContexto:c {: RESULT = c;:} ; 

ClassifierContexto ::= ID:id {: RESULT = new Classe(id); :} 
                | ID:id1 COLON ID:id2 {: RESULT = new Classe(id2, id1); :} 
                | ID:id1 DCOLON ID:id2 {: RESULT = new Classe(id1); :} ;

InvContext ::= INV COLON ExpOcl:e {: RESULT = new Invariante(e); :} InvContext 
                | 
                INV ID:id COLON ExpOcl:e {: RESULT = new Invariante(e, id); :} InvContext
                | ;

ExpOcl ::= ExpLogica:e {: RESULT = new Expressao(e); :};

ExpLogica ::= ExpRelacional:r ExpLogicaAux:e {: RESULT = new Expressao(r, e); :} ;

ExpLogicaAux ::= OperadorLogico:o ExpLogica:l {: RESULT = new Expressao(o, l); :}
              | ;

ExpRelacional ::= ExpAditiva:a ExpRelacionalAux:e {: RESULT = new Expressao(a, e); :} ;

ExpRelacionalAux ::= OperadorRelacional:o ExpAditiva:a {: RESULT = new Expressao(o, a); :}
                    | ;

ExpAditiva ::= ExpMultiplicativa:emul ExpAditivaAux:eaux {: RESULT = new Expressao(emul, eaux); :};

ExpAditivaAux ::=  OperadorMais:o ExpMultiplicativa:op1 ExpAditivaAux:op2 {: RESULT = new Expressao(o, op1, op2);:}
		|  ;

ExpMultiplicativa ::= ExpUnaria:eun ExpMultiAux:eaux {: RESULT = new Expressao(eun, eaux); :};


ExpMultiAux ::= OperadorMulti:o ExpUnaria:e1 ExpMultiAux:e2 {: RESULT = new Expressao(o, e1, e2); :}
		|  ;

ExpUnaria ::= OperadorUnario:o ExpPosFixada:epf {: RESULT = new Expressao(o, epf); :}
                | ExpPosFixada:epf {: RESULT = new Expressao(epf); :};

ExpPosFixada ::= ExpPrimaria:ep ExpPosFixadaAux:epf {: RESULT = new Expressao(ep, epf); RESULT.setTipoNodo(); :};


ExpPosFixadaAux ::= DOT ChamadaPropriedade:c ExpPosFixadaAux:epf 
						{: RESULT = new Expressao(c, epf); 
							if(epf != null) { 
								if(epf.getTipo().equals("COLLECTION") )
									throw new SemanticException("Expressão de coleção inválida"); }
							RESULT.setTipo(c.getTipo(); :}
                    |
                    RARROW ChamadaPropriedadeColecao:c ExpPosFixadaAux:epf {: RESULT = new Expressao(c, epf); :}
                    |
                    ; 

ExpPrimaria ::= Literal:l {: RESULT = new Expressao(l); RESULT.setTipo(l.getTipo()); :}
		| ChamadaPropriedade:c {: RESULT = new Expressao(c); RESULT.setTipo(c.getTipo());  :}
		| LPAREN  ExpOcl:e RPAREN {: RESULT = new Expressao(e); RESULT.setTipo(e.getTipo()); :}
		| ExpressaoIf:eif {: RESULT = new Expressao(eif); RESULT.setTipo(eif.getTipo()); :} ;

ExpressaoIf ::= IF ExpOcl:e1 THEN ExpOcl:e2 ELSE ExpOcl:e3 ENDIF {: 
	RESULT = new ExpressaoIf(e1,e2,e3); 
	e1.setTipoRequerido("BOOLEAN"));
	e1.checkTipo();
	if ( e2.getTipo.equals(e3.getTipo()) ) {
		RESULT.setTipo(e2.getTipo());
	} else {
		throw new SemanticException("Tipos incompativeis no if: "+e2.getTipo()+" "+ e3.getTipo() );  
	} :};


ChamadaPropriedade ::= Caminho:c ParametrosChamadaPropriedadeOpt:p {: RESULT = new Propriedade(c, p); :};

ChamadaPropriedadeColecao ::= OperadorColecao:o ParametrosChamadaPropriedadeOpt:p {: RESULT = new OperacaoCol(o, p); RESULT.setTipo(o.getTipo()); :};
							  
ParametrosChamadaPropriedadeOpt ::= ParametrosChamadaPropriedade:p {: RESULT = p; :} | ; 

ParametrosChamadaPropriedade ::= LPAREN ParametrosChamadaPropriedadeAux:p {: RESULT = p; :} ;

ParametrosChamadaPropriedadeAux ::= ExpOcl:e {: RESULT = new Parametros(e); :} RPAREN 
                                | Declarador:d ExpOcl:e {: RESULT = new Parametros(d, e); :} RPAREN 
                                | RPAREN {: RESULT = new Parametros(); :};

Declarador ::= ID:id DeclaradorAux:aux {: RESULT = new Declarador(id, aux); :} EspecificadorTipoOpt BAR  ;

DeclaradorAux ::= COMMA ID:id DeclaradorAux:aux {: RESULT = new Declarador(id, aux); :} | ;

EspecificadorTipoOpt ::= SEMICOL ID COLON Caminho EQUAL ExpOcl 
                         |
                         COLON ID
                         |
                         ;

Caminho ::= ID:id CaminhoAux:c {: RESULT = new Caminho(id, c); :} ;

CaminhoAux ::= DCOLON ID:id CaminhoAux:c {: RESULT = new Caminho(id, c); :} | ;

Literal ::= STRING:s {: RESULT = new Literal(s, Literal.STRING); RESULT.setTipo("STRING"); :} 
            | NUMERO:n {: RESULT = new Literal(n, Literal.NUMERO); RESULT.setTipoNodo(); :} 
            | TRUE {: RESULT = new Literal("true", Literal.BOOLEANO); RESULT.setTipo("BOOLEAN"); :}
            | FALSE {: RESULT = new Literal("false", Literal.BOOLEANO); RESULT.setTipo("BOOLEAN"); :} ;


OperadorColecao ::= INCLUDESALL {: RESULT = new OprdCol(OprdCol.INCLUDESALL); RESULT.setTipo("BOOLEAN"); :}
                | SIZE {: RESULT = new OprdCol(OprdCol.SIZE); RESULT.setTipo("INTEGER"); :}
                | INCLUDES {: RESULT = new OprdCol(OprdCol.INCLUDES); RESULT.setTipo("BOOLEAN"); :}
                | EXCLUDES {: RESULT = new OprdCol(OprdCol.EXCLUDES); RESULT.setTipo("BOOLEAN"); :}
                | EXISTS {: RESULT = new OprdCol(OprdCol.EXISTS); RESULT.setTipo("BOOLEAN"); :}
                | SELECT {: RESULT = new OprdCol(OprdCol.SELECT); RESULT.setTipo("BOOLEAN"); :}
                | FORALL {: RESULT = new OprdCol(OprdCol.FORALL); RESULT.setTipo("BOOLEAN"); :} ;
                
OperadorMais ::= PLUS {: RESULT = new Operador(Operador.MAIS);:} 
                | MINUS {:RESULT = new Operador(Operador.MENOS);:};
                
OperadorMulti ::= MULT {:RESULT = new Operador(Operador.VEZES);:}
                | DIVIDE {:RESULT = new Operador(Operador.DIVIDIDO);:} ;
                
OperadorUnario ::= MINUS {:RESULT = new Operador(Operador.MENOSU);:} 
                | NOT {:RESULT = new Operador(Operador.NOT);:};
                
OperadorLogico ::= AND {:RESULT = new Operador(Operador.AND);:}
                | OR {:RESULT = new Operador(Operador.OR);:}
                | XOR {:RESULT = new Operador(Operador.XOR);:} 
                | IMPLIES {: RESULT = new Operador(Operador.IMPLIES);:} ;
                
OperadorRelacional ::= EQUAL {:RESULT = new Operador(Operador.IGUAL);:}
                | GT {:RESULT = new Operador(Operador.MAIORQ);:}
                | LT {:RESULT = new Operador(Operador.MENORQ);:}
                | GE {:RESULT = new Operador(Operador.MAIORIGUAL);:}
                | LE {:RESULT = new Operador(Operador.MENORIGUAL);:}
                | NEQUAL {:RESULT = new Operador(Operador.DIF);:} ;
