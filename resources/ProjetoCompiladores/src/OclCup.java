
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 04 21:32:02 BRT 2011
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 04 21:32:02 BRT 2011
  */
public class OclCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OclCup() {super();}

  /** Constructor which sets the default scanner. */
  public OclCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OclCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\034\004\000\002\034" +
    "\003\000\002\033\004\000\002\032\004\000\002\032\004" +
    "\000\002\025\003\000\002\025\003\000\002\025\004\000" +
    "\002\025\004\000\002\027\005\000\002\027\006\000\002" +
    "\026\005\000\002\026\006\000\002\026\005\000\002\026" +
    "\006\000\002\031\005\000\002\031\007\000\002\030\005" +
    "\000\002\030\003\000\002\013\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\022\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\023\011\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\005\000\002\004\007\000\002" +
    "\004\005\000\002\036\003\000\002\036\005\000\002\003" +
    "\003\000\002\003\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\006\000\002\035\005\000\002\037\005\000" +
    "\002\037\003\000\002\037\002\000\002\040\005\000\002" +
    "\040\003\000\002\005\003\000\002\005\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\027\007\001\002\000\010\031\050\032" +
    "\053\033\052\001\002\000\004\002\046\001\002\000\006" +
    "\002\uffff\027\007\001\002\000\004\064\010\001\002\000" +
    "\014\004\014\005\013\031\uffee\032\uffee\033\uffee\001\002" +
    "\000\010\031\ufffc\032\ufffc\033\ufffc\001\002\000\010\031" +
    "\ufffd\032\ufffd\033\ufffd\001\002\000\010\043\022\046\021" +
    "\064\016\001\002\000\004\064\015\001\002\000\010\031" +
    "\uffef\032\uffef\033\uffef\001\002\000\062\002\uffed\004\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\020" +
    "\uffed\024\036\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed" +
    "\042\uffed\050\uffed\051\uffed\052\uffed\053\uffed\057\uffed\060" +
    "\uffed\061\uffed\066\uffed\001\002\000\012\004\043\031\ufff1" +
    "\032\ufff1\033\ufff1\001\002\000\062\002\uffc8\004\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\023\013\uffc8\020\uffc8" +
    "\024\024\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\042" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\066\uffc8\001\002\000\062\002\uffeb\004\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\020\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\042" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\066\uffeb\001\002\000\056\002\uffc9\004\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\020\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\042\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\057\uffc9\060\uffc9\061\uffc9\066\uffc9" +
    "\001\002\000\014\013\uffc3\020\uffc3\043\022\046\021\064" +
    "\026\001\002\000\010\043\022\046\021\064\016\001\002" +
    "\000\056\002\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\013\uffc6\020\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\042\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\066\uffc6\001\002\000\014\004\035" +
    "\012\uffed\013\uffed\020\uffed\024\036\001\002\000\006\013" +
    "\uffc4\020\uffc4\001\002\000\006\013\033\020\032\001\002" +
    "\000\006\013\uffc1\020\uffc1\001\002\000\010\043\022\046" +
    "\021\064\026\001\002\000\056\002\uffc7\004\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\013\uffc7\020\uffc7\026\uffc7\027" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\042\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\057\uffc7\060\uffc7\061\uffc7\066\uffc7\001" +
    "\002\000\006\013\uffc5\020\uffc5\001\002\000\010\046\021" +
    "\064\016\065\042\001\002\000\006\046\021\064\016\001" +
    "\002\000\062\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\020\uffec\024\uffec\026\uffec\027" +
    "\uffec\031\uffec\032\uffec\033\uffec\042\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\057\uffec\060\uffec\061\uffec\066\uffec\001" +
    "\002\000\006\013\uffc2\020\uffc2\001\002\000\014\013\uffcb" +
    "\020\uffcb\031\uffcb\032\uffcb\033\uffcb\001\002\000\014\013" +
    "\uffca\020\uffca\031\uffca\032\uffca\033\uffca\001\002\000\010" +
    "\046\021\064\016\065\042\001\002\000\010\031\ufff0\032" +
    "\ufff0\033\ufff0\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002\000\014\002\ufffa\027\ufffa\031\050\032" +
    "\053\033\052\001\002\000\006\004\200\064\177\001\002" +
    "\000\014\002\ufffb\027\ufffb\031\050\032\053\033\052\001" +
    "\002\000\006\004\172\064\171\001\002\000\006\004\056" +
    "\064\055\001\002\000\006\002\ufffe\027\ufffe\001\002\000" +
    "\004\004\167\001\002\000\046\007\100\012\067\023\077" +
    "\034\060\035\103\036\071\037\111\040\112\043\022\044" +
    "\110\045\072\046\021\047\066\055\065\056\102\062\063" +
    "\063\104\064\016\001\002\000\050\002\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\013\uffd8\027\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\042\125\050\uffd8\051\uffd8\052\uffd8\053\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\066\uffd8\001\002\000\004\012\114" +
    "\001\002\000\046\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\057\uffe1\060\uffe1\061\uffe1\066" +
    "\uffe1\001\002\000\024\002\uffea\013\uffea\027\uffea\031\uffea" +
    "\032\uffea\033\uffea\050\uffea\051\uffea\053\uffea\001\002\000" +
    "\046\007\uffb6\012\uffb6\023\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\055\uffb6\056\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002" +
    "\000\014\002\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\001" +
    "\002\000\046\002\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\013\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\057\uffc0\060\uffc0\061\uffc0\066\uffc0" +
    "\001\002\000\046\007\100\012\067\023\077\034\060\035" +
    "\103\036\071\037\111\040\112\043\022\044\110\045\072" +
    "\046\021\047\066\055\065\056\102\062\063\063\104\064" +
    "\016\001\002\000\046\007\100\012\067\023\077\034\060" +
    "\035\103\036\071\037\111\040\112\043\022\044\110\045" +
    "\072\046\021\047\066\055\065\056\102\062\063\063\104" +
    "\064\016\001\002\000\046\007\100\012\067\023\077\034" +
    "\060\035\103\036\071\037\111\040\112\043\022\044\110" +
    "\045\072\046\021\047\066\055\065\056\102\062\063\063" +
    "\104\064\016\001\002\000\004\012\114\001\002\000\046" +
    "\002\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\027" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\057\uffd9\060\uffd9\061\uffd9\066\uffd9\001\002\000" +
    "\046\002\uffe3\006\uffe3\007\uffe3\010\150\011\152\013\uffe3" +
    "\027\uffe3\031\uffe3\032\uffe3\033\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\057\uffe3\060\uffe3\061\uffe3\066\uffe3\001\002" +
    "\000\046\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013" +
    "\uffde\027\uffde\031\uffde\032\uffde\033\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\057\uffde\060\uffde\061\uffde\066\uffde\001" +
    "\002\000\046\002\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\013\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\057\uffdc\060\uffdc\061\uffdc\066\uffdc" +
    "\001\002\000\034\002\uffe9\013\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\050\uffe9\051\uffe9\052\142\053\uffe9\057\143" +
    "\060\146\061\145\001\002\000\046\007\uffb4\012\uffb4\023" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\055\uffb4\056\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\046\007\uffb5\012\uffb5" +
    "\023\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\055\uffb5\056\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\001\002\000\046\002\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\013\uffda\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\050\uffda\051\uffda\052\uffda\053\uffda\057" +
    "\uffda\060\uffda\061\uffda\066\uffda\001\002\000\046\002\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\027\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\066\uffbf\001\002\000\004\012" +
    "\114\001\002\000\046\002\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\013\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\066\uffdb\001\002\000\036\002\uffe7\013\uffe7\027\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\066\137\001\002\000\042\002" +
    "\uffe5\006\134\007\135\013\uffe5\027\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\066\uffe5\001\002\000\046\002\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\013\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\066\uffdf\001\002\000\004\012\131\001" +
    "\002\000\004\012\114\001\002\000\004\012\114\001\002" +
    "\000\046\002\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\057\uffd2\060\uffd2\061\uffd2\066\uffd2\001" +
    "\002\000\046\007\100\012\067\023\077\034\060\035\103" +
    "\036\071\037\111\040\112\043\022\044\110\045\072\046" +
    "\021\047\066\055\065\056\102\062\063\063\104\064\016" +
    "\001\002\000\034\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\020\124\026\uffcd\042\125\052\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\066\uffd8\001\002\000\004\013\123\001\002\000" +
    "\004\026\120\001\002\000\046\007\100\012\067\023\077" +
    "\034\060\035\103\036\071\037\111\040\112\043\022\044" +
    "\110\045\072\046\021\047\066\055\065\056\102\062\063" +
    "\063\104\064\016\001\002\000\004\013\122\001\002\000" +
    "\046\002\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\033\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\057\uffcf\060\uffcf\061\uffcf\066\uffcf\001\002" +
    "\000\046\002\uffce\006\uffce\007\uffce\010\uffce\011\uffce\013" +
    "\uffce\027\uffce\031\uffce\032\uffce\033\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\057\uffce\060\uffce\061\uffce\066\uffce\001" +
    "\002\000\010\043\022\046\021\064\016\001\002\000\046" +
    "\002\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\027" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\057\uffd7\060\uffd7\061\uffd7\066\uffd7\001\002\000" +
    "\004\026\uffcc\001\002\000\006\020\124\026\uffcd\001\002" +
    "\000\046\002\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013" +
    "\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\057\uffd3\060\uffd3\061\uffd3\066\uffd3\001" +
    "\002\000\004\013\132\001\002\000\046\002\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\013\uffd0\027\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\066\uffd0\001\002\000\046\007\100\012" +
    "\067\023\077\034\060\035\103\036\071\037\111\040\112" +
    "\043\022\044\110\045\072\046\021\047\066\055\065\056" +
    "\102\062\063\063\104\064\016\001\002\000\046\007\uffba" +
    "\012\uffba\023\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\055\uffba" +
    "\056\uffba\062\uffba\063\uffba\064\uffba\001\002\000\046\007" +
    "\uffb9\012\uffb9\023\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\055" +
    "\uffb9\056\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\036" +
    "\002\uffe4\013\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\066\uffe4\001\002\000\046\007\100\012\067\023\077\034" +
    "\060\035\103\036\071\037\111\040\112\043\022\044\110" +
    "\045\072\046\021\047\066\055\065\056\102\062\063\063" +
    "\104\064\016\001\002\000\034\002\uffe6\013\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000\046\002\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\066\uffd4\001\002\000\046\007" +
    "\uffbb\012\uffbb\023\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\055" +
    "\uffbb\056\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\046" +
    "\007\uffbe\012\uffbe\023\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\055\uffbe\056\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000" +
    "\046\007\100\012\067\023\077\034\060\035\103\036\071" +
    "\037\111\040\112\043\022\044\110\045\072\046\021\047" +
    "\066\055\065\056\102\062\063\063\104\064\016\001\002" +
    "\000\046\007\uffbc\012\uffbc\023\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\055\uffbc\056\uffbc\062\uffbc\063\uffbc\064\uffbc\001" +
    "\002\000\046\007\uffbd\012\uffbd\023\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\055\uffbd\056\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\001\002\000\024\002\uffe8\013\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\050\uffe8\051\uffe8\053\uffe8\001\002\000\046" +
    "\007\uffb8\012\uffb8\023\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\055\uffb8\056\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000" +
    "\046\007\100\012\067\023\077\034\060\035\103\036\071" +
    "\037\111\040\112\043\022\044\110\045\072\046\021\047" +
    "\066\055\065\056\102\062\063\063\104\064\016\001\002" +
    "\000\046\007\uffb7\012\uffb7\023\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\055\uffb7\056\uffb7\062\uffb7\063\uffb7\064\uffb7\001" +
    "\002\000\042\002\uffe2\006\uffe2\007\uffe2\013\uffe2\027\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\066\uffe2\001\002\000\046" +
    "\002\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\027" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\057\uffd1\060\uffd1\061\uffd1\066\uffd1\001\002\000" +
    "\046\002\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\033\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\057\uffe0\060\uffe0\061\uffe0\066\uffe0\001\002" +
    "\000\004\013\157\001\002\000\046\002\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\013\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\066\uffdd\001\002\000\004\050\161\001\002" +
    "\000\046\007\100\012\067\023\077\034\060\035\103\036" +
    "\071\037\111\040\112\043\022\044\110\045\072\046\021" +
    "\047\066\055\065\056\102\062\063\063\104\064\016\001" +
    "\002\000\004\051\163\001\002\000\046\007\100\012\067" +
    "\023\077\034\060\035\103\036\071\037\111\040\112\043" +
    "\022\044\110\045\072\046\021\047\066\055\065\056\102" +
    "\062\063\063\104\064\016\001\002\000\004\053\165\001" +
    "\002\000\046\002\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\057\uffd6\060\uffd6\061\uffd6\066\uffd6" +
    "\001\002\000\046\002\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\013\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\057\uffd5\060\uffd5\061\uffd5\066" +
    "\uffd5\001\002\000\046\007\100\012\067\023\077\034\060" +
    "\035\103\036\071\037\111\040\112\043\022\044\110\045" +
    "\072\046\021\047\066\055\065\056\102\062\063\063\104" +
    "\064\016\001\002\000\014\002\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\001\002\000\004\004\174\001\002\000\046" +
    "\007\100\012\067\023\077\034\060\035\103\036\071\037" +
    "\111\040\112\043\022\044\110\045\072\046\021\047\066" +
    "\055\065\056\102\062\063\063\104\064\016\001\002\000" +
    "\014\002\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\001\002" +
    "\000\046\007\100\012\067\023\077\034\060\035\103\036" +
    "\071\037\111\040\112\043\022\044\110\045\072\046\021" +
    "\047\066\055\065\056\102\062\063\063\104\064\016\001" +
    "\002\000\014\002\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\001\002\000\006\002\ufff9\027\ufff9\001\002\000\004\004" +
    "\202\001\002\000\046\007\100\012\067\023\077\034\060" +
    "\035\103\036\071\037\111\040\112\043\022\044\110\045" +
    "\072\046\021\047\066\055\065\056\102\062\063\063\104" +
    "\064\016\001\002\000\014\002\ufff5\027\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\001\002\000\046\007\100\012\067\023\077" +
    "\034\060\035\103\036\071\037\111\040\112\043\022\044" +
    "\110\045\072\046\021\047\066\055\065\056\102\062\063" +
    "\063\104\064\016\001\002\000\014\002\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\001\002\000\006\002\ufff8\027\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\032\003\033\005\034\004\001\001\000" +
    "\010\025\053\026\046\027\050\001\001\000\002\001\001" +
    "\000\010\032\003\033\005\034\044\001\001\000\006\030" +
    "\010\031\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\017\035\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\017\035\030\037\027\040\026\001\001" +
    "\000\006\013\017\035\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\017\035\030\040\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\037\013\040" +
    "\001\001\000\004\013\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\043\013\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\203\026\046\027\050" +
    "\001\001\000\002\001\001\000\010\025\175\026\046\027" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\106\005\100\011" +
    "\067\013\017\014\063\015\061\016\075\017\104\020\105" +
    "\021\072\022\060\023\073\024\074\035\056\001\001\000" +
    "\002\001\001\000\004\004\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\106\005\100\011\067\013\017" +
    "\014\157\015\061\016\075\017\104\020\105\021\072\022" +
    "\060\023\073\024\074\035\056\001\001\000\036\002\106" +
    "\005\100\011\067\013\017\014\155\015\061\016\075\017" +
    "\104\020\105\021\072\022\060\023\073\024\074\035\056" +
    "\001\001\000\024\002\106\005\100\011\067\013\017\021" +
    "\154\022\060\023\073\024\074\035\056\001\001\000\004" +
    "\004\153\001\001\000\002\001\001\000\004\010\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\127\001\001" +
    "\000\004\004\112\001\001\000\002\001\001\000\040\002" +
    "\106\005\100\011\067\013\017\014\115\015\061\016\075" +
    "\017\104\020\105\021\072\022\060\023\073\024\074\035" +
    "\114\036\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\106\005\100\011\067\013" +
    "\017\014\120\015\061\016\075\017\104\020\105\021\072" +
    "\022\060\023\073\024\074\035\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\017" +
    "\035\126\036\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\106\005\100\011\067\013" +
    "\017\017\135\020\105\021\072\022\060\023\073\024\074" +
    "\035\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\106\005\100\011\067\013\017" +
    "\016\137\017\104\020\105\021\072\022\060\023\073\024" +
    "\074\035\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\106\005" +
    "\100\011\067\013\017\015\146\016\075\017\104\020\105" +
    "\021\072\022\060\023\073\024\074\035\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\106\005\100\011\067\013\017\020" +
    "\152\021\072\022\060\023\073\024\074\035\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\002\106\005\100\011\067\013\017\014" +
    "\161\015\061\016\075\017\104\020\105\021\072\022\060" +
    "\023\073\024\074\035\056\001\001\000\002\001\001\000" +
    "\036\002\106\005\100\011\067\013\017\014\163\015\061" +
    "\016\075\017\104\020\105\021\072\022\060\023\073\024" +
    "\074\035\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\106\005\100\011\067\013" +
    "\017\014\167\015\061\016\075\017\104\020\105\021\072" +
    "\022\060\023\073\024\074\035\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\106\005\100\011\067" +
    "\013\017\014\172\015\061\016\075\017\104\020\105\021" +
    "\072\022\060\023\073\024\074\035\056\001\001\000\002" +
    "\001\001\000\036\002\106\005\100\011\067\013\017\014" +
    "\174\015\061\016\075\017\104\020\105\021\072\022\060" +
    "\023\073\024\074\035\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\106\005\100" +
    "\011\067\013\017\014\200\015\061\016\075\017\104\020" +
    "\105\021\072\022\060\023\073\024\074\035\056\001\001" +
    "\000\002\001\001\000\036\002\106\005\100\011\067\013" +
    "\017\014\202\015\061\016\075\017\104\020\105\021\072" +
    "\022\060\023\073\024\074\035\056\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OclCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OclCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OclCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OclCup$actions {
  private final OclCup parser;

  /** Constructor */
  CUP$OclCup$actions(OclCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OclCup$do_action(
    int                        CUP$OclCup$act_num,
    java_cup.runtime.lr_parser CUP$OclCup$parser,
    java.util.Stack            CUP$OclCup$stack,
    int                        CUP$OclCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OclCup$result;

      /* select the action based on the action number */
      switch (CUP$OclCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UnaryOperator ::= RARROW 
            {
              String RESULT =null;
		 RESULT = "->"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("UnaryOperator",7, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UnaryOperator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("UnaryOperator",7, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UnaryOperator ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("UnaryOperator",7, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MultOperator ::= DIVIDE 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("MultOperator",6, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MultOperator ::= MULT 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("MultOperator",6, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArithmeticOperator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ArithmeticOperator",5, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArithmeticOperator ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ArithmeticOperator",5, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LogicalOperator ::= IMPLIES 
            {
              String RESULT =null;
		 RESULT = "implies"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalOperator",8, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LogicalOperator ::= XOR 
            {
              String RESULT =null;
		 RESULT = "xor"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalOperator",8, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LogicalOperator ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalOperator",8, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LogicalOperator ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalOperator",8, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BoolValue ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("BoolValue",3, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BoolValue ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("BoolValue",3, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FormalParameter ::= PropertyCall 
            {
              ParametersNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("FormalParameter",30, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FormalParameter ::= ID COLON TypeSpecifier 
            {
              ParametersNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("FormalParameter",30, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FormalParameters ::= 
            {
              ParametersNode RESULT =null;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("FormalParameters",29, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FormalParameters ::= FormalParameter 
            {
              ParametersNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ParametersNode f = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new FormalParameterNode(f, fleft, fright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("FormalParameters",29, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormalParameters ::= FormalParameters COMMA FormalParameter 
            {
              ParametersNode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		ParametersNode f1 = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ParametersNode f2 = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 f1.addParameter(f2); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("FormalParameters",29, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PropertyCall ::= PathName DOT PropertyCall 
            {
              PropertyCallNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		PathNode p = (PathNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PropertyCallNode pc = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PropertyCall",27, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PropertyCall ::= PathName LPAREN FormalParameters RPAREN 
            {
              PropertyCallNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).right;
		PathNode p = (PathNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		ParametersNode f = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PropertyCall",27, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PropertyCall ::= PathName 
            {
              PropertyCallNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PathNode p = (PathNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PropertyCallNode(p, pleft, pright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PropertyCall",27, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PropertyCall ::= RESULT 
            {
              PropertyCallNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PropertyCallNode(new PathNode(null, "result", rleft, rright), rleft, rright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PropertyCall",27, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeSpecifier ::= TYPE 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new TypeNode(t, tleft, tright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",1, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeSpecifier ::= PathName 
            {
              TypeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PathNode p = (PathNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new TypeNode(p, pleft, pright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",1, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CollectionParameters ::= PropertyCall COMMA CollectionParameters 
            {
              ParametersNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ParametersNode c = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 c.addPropertyCall(p); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionParameters",28, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CollectionParameters ::= PropertyCall 
            {
              ParametersNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new CollectionParametersNode(p, pleft, pright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionParameters",28, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OperationArguments ::= LPAREN OclExpression RPAREN 
            {
              OperationArgumentsNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("OperationArguments",2, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OperationArguments ::= LPAREN CollectionParameters BAR OclExpression RPAREN 
            {
              OperationArgumentsNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).right;
		ParametersNode c = (ParametersNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;

              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("OperationArguments",2, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-4)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CollectionExpression ::= SIZE LPAREN RPAREN 
            {
              OclExpressionNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		 RESULT = new SizeOperationNode(sleft, sright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CollectionExpression ::= FOR_ALL OperationArguments 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OperationArgumentsNode o = (OperationArgumentsNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ForAllOperationNode(o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CollectionExpression ::= EXCLUDING OperationArguments 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OperationArgumentsNode o = (OperationArgumentsNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ExcludingOperationNode(o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CollectionExpression ::= INCLUDING OperationArguments 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OperationArgumentsNode o = (OperationArgumentsNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new IncludingOperationNode(o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CollectionExpression ::= EXISTS OperationArguments 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OperationArgumentsNode o = (OperationArgumentsNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ExistsOperationNode(o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CollectionExpression ::= SELECT OperationArguments 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OperationArgumentsNode o = (OperationArgumentsNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new SelectOperationNode(o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("CollectionExpression",18, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ConditionalExpression ::= IF OclExpression THEN OclExpression ELSE OclExpression ENDIF 
            {
              OclExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-5)).right;
		OclExpressionNode i = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).right;
		OclExpressionNode t = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		OclExpressionNode e = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		 RESULT = new IfThenElseNode(i, t, e, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",17, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-6)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Literal ::= PropertyCall AT_PRE 
            {
              LiteralNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		 RESULT = new LiteralNode(new AtPreNode(p, pleft, pright), pleft, pright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Literal ::= PropertyCall 
            {
              LiteralNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new LiteralNode(p, pleft, pright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Literal ::= STRING 
            {
              LiteralNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new LiteralNode(new StringNode(s.toString(), sleft, sright), sleft, sright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Literal ::= BoolValue 
            {
              LiteralNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new LiteralNode(b, bleft, bright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Literal ::= NUMERO 
            {
              LiteralNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new LiteralNode(n, nleft, nright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrimaryExpression ::= CollectionExpression 
            {
              OclExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode c = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = c; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimaryExpression ::= LPAREN OclExpression RPAREN 
            {
              OclExpressionNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		 RESULT = o; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpression ::= ConditionalExpression 
            {
              OclExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode c = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = c; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrimaryExpression ::= Literal 
            {
              OclExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		LiteralNode l = (LiteralNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = l; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UnaryExpression ::= UnaryOperator UnaryExpression 
            {
              OclExpressionNode RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		String uo = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode ue = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new UnaryExprNode(uo, ue, uoleft, uoright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",15, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UnaryExpression ::= PrimaryExpression 
            {
              OclExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode p = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = p; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",15, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MultiplicativeExpression ::= UnaryExpression MultOperator MultiplicativeExpression 
            {
              OclExpressionNode RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		OclExpressionNode ue = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		String mo = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode me = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new MultExprNode(ue, mo, me, moleft, moright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",14, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MultiplicativeExpression ::= UnaryExpression 
            {
              OclExpressionNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode u = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = u; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",14, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AdditiveExpression ::= MultiplicativeExpression ArithmeticOperator AdditiveExpression 
            {
              OclExpressionNode RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		OclExpressionNode me = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		String ao = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode ae = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new AddExprNode(me, ao, ae, aoleft, aoright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",13, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AdditiveExpression ::= MultiplicativeExpression 
            {
              OclExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode m = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = m; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",13, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelationalExpression ::= AdditiveExpression RELOP RelationalExpression 
            {
              OclExpressionNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		OclExpressionNode ae = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode re = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new RelationalExprNode(ae, r, re, rleft, rright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",12, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelationalExpression ::= AdditiveExpression 
            {
              OclExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode a = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = a; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",12, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LogicalExpression ::= RelationalExpression LogicalOperator LogicalExpression 
            {
              OclExpressionNode RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		OclExpressionNode re = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		String lo = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode le = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ConditionalExprNode(re, lo, le, leleft, leright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalExpression",11, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LogicalExpression ::= RelationalExpression 
            {
              OclExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode r = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = r; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("LogicalExpression",11, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OclExpression ::= LogicalExpression 
            {
              OclExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode l = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = l; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("OclExpression",10, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PathName ::= SELF 
            {
              PathNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PathNode(null, "self", sleft, sright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PathName",9, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PathName ::= ID DOT PathName 
            {
              PathNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PathNode p = (PathNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PathNode(i, p, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PathName",9, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PathName ::= ID 
            {
              PathNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PathNode(null, i, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PathName",9, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassifierContext ::= ID 
            {
              ContextNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ClassifierContextNode(i, null, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ClassifierContext",22, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassifierContext ::= ID COLON ID 
            {
              ContextNode RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ClassifierContextNode(i1, i2, cleft, cright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ClassifierContext",22, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OperationContext ::= ID DCOLON PropertyCall COLON TypeSpecifier 
            {
              ContextNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new OperationContextNode(i, p, t, dleft, dright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("OperationContext",23, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-4)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OperationContext ::= ID DCOLON PropertyCall 
            {
              ContextNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PropertyCallNode p = (PropertyCallNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new OperationContextNode(i, p, null, dleft, dright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("OperationContext",23, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PrePostOrBodyContext ::= POST ID COLON OclExpression 
            {
              PrePostOrBodyNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PrePostOrBodyNode(i, o, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrePostOrBodyContext",20, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PrePostOrBodyContext ::= POST COLON OclExpression 
            {
              PrePostOrBodyNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PrePostOrBodyNode(null, o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrePostOrBodyContext",20, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PrePostOrBodyContext ::= PRE ID COLON OclExpression 
            {
              PrePostOrBodyNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PrePostOrBodyNode(i, o, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrePostOrBodyContext",20, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PrePostOrBodyContext ::= PRE COLON OclExpression 
            {
              PrePostOrBodyNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new PrePostOrBodyNode(null, o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("PrePostOrBodyContext",20, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InvContext ::= INV ID COLON OclExpression 
            {
              InvariantNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new InvariantNode(i, o, ileft, iright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("InvContext",21, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-3)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InvContext ::= INV COLON OclExpression 
            {
              InvariantNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		OclExpressionNode o = (OclExpressionNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new InvariantNode(null, o, oleft, oright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("InvContext",21, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-2)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ContextBody ::= PrePostOrBodyContext ContextBody 
            {
              ContextBodyNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		PrePostOrBodyNode p = (PrePostOrBodyNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ContextBodyNode c = (ContextBodyNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 p.addContext(c); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextBody",19, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ContextBody ::= InvContext ContextBody 
            {
              ContextBodyNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		InvariantNode i = (InvariantNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ContextBodyNode c = (ContextBodyNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 if (c == null) RESULT = i; else i.addContext(c); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextBody",19, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ContextBody ::= PrePostOrBodyContext 
            {
              ContextBodyNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		PrePostOrBodyNode p = (PrePostOrBodyNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = p; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextBody",19, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ContextBody ::= InvContext 
            {
              ContextBodyNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		InvariantNode i = (InvariantNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = i; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextBody",19, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ContextDecl ::= CONTEXT ClassifierContext 
            {
              ContextNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ContextNode c = (ContextNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = c; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextDecl",24, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ContextDecl ::= CONTEXT OperationContext 
            {
              ContextNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ContextNode o = (ContextNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = o; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ContextDecl",24, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ConstraintDecl ::= ContextDecl ContextBody 
            {
              ConstraintNode RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		ContextNode cd = (ContextNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ContextBodyNode cb = (ContextBodyNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = new ConstraintNode(cd, cb, cdleft, cdright); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("ConstraintDecl",25, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Constraint ::= ConstraintDecl 
            {
              ConstraintNode RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ConstraintNode cd = (ConstraintNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 RESULT = cd; 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Constraint",26, ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Constraint ::= ConstraintDecl Constraint 
            {
              ConstraintNode RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		ConstraintNode cd = (ConstraintNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()).right;
		ConstraintNode c = (ConstraintNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.peek()).value;
		 cd.addConstraint(c); 
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("Constraint",26, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          return CUP$OclCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Constraint EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).right;
		ConstraintNode start_val = (ConstraintNode)((java_cup.runtime.Symbol) CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)).value;
		RESULT = start_val;
              CUP$OclCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OclCup$stack.elementAt(CUP$OclCup$top-1)), ((java_cup.runtime.Symbol)CUP$OclCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OclCup$parser.done_parsing();
          return CUP$OclCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

